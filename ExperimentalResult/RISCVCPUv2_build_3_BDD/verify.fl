load "ste.fl";
update_vossrc "RECURSION-CALL-LIMIT" "100000";
update_vossrc "DYNAMIC-ORDERING" "NO";
let p = verilog2pexlif "" "RISCVCPUv2" ["RISCVCPUv2.sv"] [];
let ckt = pexlif2fsm p;
let ldrs1_1 = bv_variable "ldrs1_1[4:0]" ;
let ldrd_0 = bv_variable "ldrd_0[4:0]" ;
let ldrd_1 = bv_variable "ldrd_1[4:0]" ;
let mem_data_in_1 = bv_variable "mem_data_in_1[31:0]" ;
let rs2_addr_in = bv_variable "rs2_addr_in[4:0]" ;
let rs1_addr_in = bv_variable "rs1_addr_in[4:0]" ;
let mem_data_in_0 = bv_variable "mem_data_in_0[31:0]" ;
let rs2_rdata_in = bv_variable "rs2_rdata_in[63:0]" ;
let mem_addr_in_1 = bv_variable "mem_addr_in_1[9:0]" ;
let mem_addr_in_0 = bv_variable "mem_addr_in_0[9:0]" ;
let rs1_rdata_in = bv_variable "rs1_rdata_in[63:0]" ;
let ldrs1_0 = bv_variable "ldrs1_0[4:0]" ;

let ant = 
  "clock" is_clock 8 
  and
  "reset" is T in_cycle 0  
 and 
 "io_rvfi_rst" is T in_cycle 0  
 and 
 "io_rvfi_rs1_addr_in[4:0]" is rs1_addr_in in_cycle 0  
 and 
 "io_rvfi_rs2_addr_in[4:0]" is rs2_addr_in in_cycle 0  
 and 
 "io_rvfi_rs1_rdata_in[63:0]" is rs1_rdata_in in_cycle 0  
 and 
 "io_rvfi_rs2_rdata_in[63:0]" is rs2_rdata_in in_cycle 0  
 and 
 "io_rvfi_mem_addr_in_0[9:0]" is mem_addr_in_0 in_cycle 0  
 and 
 "io_rvfi_mem_addr_in_1[9:0]" is mem_addr_in_1 in_cycle 0  
 and 
 "io_rvfi_mem_data_in_0[31:0]" is mem_data_in_0 in_cycle 0  
 and 
 "io_rvfi_mem_data_in_1[31:0]" is mem_data_in_1 in_cycle 0  
 and 
 "io_rvfi_insn_in_0[31:20]" is 0 in_cycle 0  
 and 
 "io_rvfi_insn_in_0[14:12]" is 0 in_cycle 0  
 and 
 "io_rvfi_insn_in_0[6:0]" is 3 in_cycle 0  
 and 
 "io_rvfi_insn_in_0[19:15]" is ldrs1_0 in_cycle 0  
 and 
 "io_rvfi_insn_in_0[11:7]" is ldrd_0 in_cycle 0  
 and 
 "io_rvfi_insn_in_1[31:20]" is 0 in_cycle 0  
 and 
 "io_rvfi_insn_in_1[14:12]" is 0 in_cycle 0  
 and 
 "io_rvfi_insn_in_1[6:0]" is 3 in_cycle 0  
 and 
 "io_rvfi_insn_in_1[19:15]" is ldrs1_1 in_cycle 0  
 and 
 "io_rvfi_insn_in_1[11:7]" is ldrd_1 in_cycle 0  
 and 
 "io_rvfi_insn_in_2[31:25]" is 0 in_cycle 0  
 and 
 "io_rvfi_insn_in_2[14:12]" is 0 in_cycle 0  
 and 
 "io_rvfi_insn_in_2[6:0]" is 99 in_cycle 0  
 and 
 "io_rvfi_insn_in_2[24:20]" is ldrd_0 in_cycle 0  
 and 
 "io_rvfi_insn_in_2[19:15]" is ldrd_1 in_cycle 0  
 and 
 "io_rvfi_insn_in_2[11:7]" is 16 in_cycle 0  
 and 
 "reset" is F in_cycle 1  
 and 
 "io_rvfi_rst" is F in_cycle 1  
 and 
 "reset" is F in_cycle 2  
 and 
 "io_rvfi_rst" is F in_cycle 2  
 and 
 "reset" is F in_cycle 3  
 and 
 "io_rvfi_rst" is F in_cycle 3  
 and 
 "reset" is F in_cycle 4  
 and 
 "io_rvfi_rst" is F in_cycle 4  
 and 
 "reset" is F in_cycle 5  
 and 
 "io_rvfi_rst" is F in_cycle 5  
 and 
 "reset" is F in_cycle 6  
 and 
 "io_rvfi_rst" is F in_cycle 6  
 and 
 "reset" is F in_cycle 7  
 and 
 "io_rvfi_rst" is F in_cycle 7 ;
let cons = 
  "io_rvfi_rd_wdata[31:0]" is mem_data_in_0 in_cycle 5  when ( ( NOT ( (bv_geq ldrd_0 ldrd_1 ) AND (bv_leq ldrd_0 ldrd_1) ) ) AND ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (bv_geq rs1_addr_in ldrs1_0 ) AND (bv_leq rs1_addr_in ldrs1_0) ) AND ( (bv_geq rs2_addr_in ldrs1_1 ) AND (bv_leq rs2_addr_in ldrs1_1) ) ) AND ( NOT ( (bv_geq mem_addr_in_0 mem_addr_in_1 ) AND (bv_leq mem_addr_in_0 mem_addr_in_1) ) ) ) AND ( NOT ( (bv_geq ldrd_0 ldrs1_1 ) AND (bv_leq ldrd_0 ldrs1_1) ) ) ) AND ( NOT ( (bv_geq ldrd_0 ldrs1_0 ) AND (bv_leq ldrd_0 ldrs1_0) ) ) ) AND ( NOT ( (bv_geq ldrd_1 ldrs1_1 ) AND (bv_leq ldrd_1 ldrs1_1) ) ) ) AND ( NOT ( (bv_geq ldrd_1 ldrs1_0 ) AND (bv_leq ldrd_1 ldrs1_0) ) ) ) AND ( NOT ( (bv_geq rs1_addr_in rs2_addr_in ) AND (bv_leq rs1_addr_in rs2_addr_in) ) ) ) AND ( NOT ( (bv_geq ldrs1_0 (int2bv 0 ) ) AND (bv_leq ldrs1_0 (int2bv 0 )) ) ) ) AND ( NOT ( (bv_geq ldrs1_1 (int2bv 0 ) ) AND (bv_leq ldrs1_1 (int2bv 0 )) ) ) ) AND ( NOT ( (bv_geq ldrd_0 (int2bv 0 ) ) AND (bv_leq ldrd_0 (int2bv 0 )) ) ) ) AND ( NOT ( (bv_geq ldrd_1 (int2bv 0 ) ) AND (bv_leq ldrd_1 (int2bv 0 )) ) ) ) AND ( NOT ( (bv_geq rs1_rdata_in (int2bv 0 ) ) AND (bv_leq rs1_rdata_in (int2bv 0 )) ) ) ) AND ( NOT ( (bv_geq rs2_rdata_in (int2bv 0 ) ) AND (bv_leq rs2_rdata_in (int2bv 0 )) ) ) ) AND ( (bv_geq (BV_EXTRACT rs1_rdata_in 9 0 ) mem_addr_in_0 ) AND (bv_leq (BV_EXTRACT rs1_rdata_in 9 0 ) mem_addr_in_0) ) ) AND ( (bv_geq (BV_EXTRACT rs2_rdata_in 9 0 ) mem_addr_in_1 ) AND (bv_leq (BV_EXTRACT rs2_rdata_in 9 0 ) mem_addr_in_1) ) ) AND ( (bv_geq (BV_EXTRACT rs1_rdata_in 63 10 ) (int2bv 0 ) ) AND (bv_leq (BV_EXTRACT rs1_rdata_in 63 10 ) (int2bv 0 )) ) ) AND ( (bv_geq (BV_EXTRACT rs2_rdata_in 63 10 ) (int2bv 0 ) ) AND (bv_leq (BV_EXTRACT rs2_rdata_in 63 10 ) (int2bv 0 )) ) ) ) 
 and 
 "io_rvfi_rd_wdata[31:0]" is mem_data_in_1 in_cycle 6  when ( ( NOT ( (bv_geq ldrd_0 ldrd_1 ) AND (bv_leq ldrd_0 ldrd_1) ) ) AND ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (bv_geq rs1_addr_in ldrs1_0 ) AND (bv_leq rs1_addr_in ldrs1_0) ) AND ( (bv_geq rs2_addr_in ldrs1_1 ) AND (bv_leq rs2_addr_in ldrs1_1) ) ) AND ( NOT ( (bv_geq mem_addr_in_0 mem_addr_in_1 ) AND (bv_leq mem_addr_in_0 mem_addr_in_1) ) ) ) AND ( NOT ( (bv_geq ldrd_0 ldrs1_1 ) AND (bv_leq ldrd_0 ldrs1_1) ) ) ) AND ( NOT ( (bv_geq ldrd_0 ldrs1_0 ) AND (bv_leq ldrd_0 ldrs1_0) ) ) ) AND ( NOT ( (bv_geq ldrd_1 ldrs1_1 ) AND (bv_leq ldrd_1 ldrs1_1) ) ) ) AND ( NOT ( (bv_geq ldrd_1 ldrs1_0 ) AND (bv_leq ldrd_1 ldrs1_0) ) ) ) AND ( NOT ( (bv_geq rs1_addr_in rs2_addr_in ) AND (bv_leq rs1_addr_in rs2_addr_in) ) ) ) AND ( NOT ( (bv_geq ldrs1_0 (int2bv 0 ) ) AND (bv_leq ldrs1_0 (int2bv 0 )) ) ) ) AND ( NOT ( (bv_geq ldrs1_1 (int2bv 0 ) ) AND (bv_leq ldrs1_1 (int2bv 0 )) ) ) ) AND ( NOT ( (bv_geq ldrd_0 (int2bv 0 ) ) AND (bv_leq ldrd_0 (int2bv 0 )) ) ) ) AND ( NOT ( (bv_geq ldrd_1 (int2bv 0 ) ) AND (bv_leq ldrd_1 (int2bv 0 )) ) ) ) AND ( NOT ( (bv_geq rs1_rdata_in (int2bv 0 ) ) AND (bv_leq rs1_rdata_in (int2bv 0 )) ) ) ) AND ( NOT ( (bv_geq rs2_rdata_in (int2bv 0 ) ) AND (bv_leq rs2_rdata_in (int2bv 0 )) ) ) ) AND ( (bv_geq (BV_EXTRACT rs1_rdata_in 9 0 ) mem_addr_in_0 ) AND (bv_leq (BV_EXTRACT rs1_rdata_in 9 0 ) mem_addr_in_0) ) ) AND ( (bv_geq (BV_EXTRACT rs2_rdata_in 9 0 ) mem_addr_in_1 ) AND (bv_leq (BV_EXTRACT rs2_rdata_in 9 0 ) mem_addr_in_1) ) ) AND ( (bv_geq (BV_EXTRACT rs1_rdata_in 63 10 ) (int2bv 0 ) ) AND (bv_leq (BV_EXTRACT rs1_rdata_in 63 10 ) (int2bv 0 )) ) ) AND ( (bv_geq (BV_EXTRACT rs2_rdata_in 63 10 ) (int2bv 0 ) ) AND (bv_leq (BV_EXTRACT rs2_rdata_in 63 10 ) (int2bv 0 )) ) ) ) 
 and 
 "io_rvfi_rd_wdata[31:0]" is mem_data_in_1 in_cycle 7  when ( ( NOT ( (bv_geq ldrd_0 ldrd_1 ) AND (bv_leq ldrd_0 ldrd_1) ) ) AND ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (bv_geq rs1_addr_in ldrs1_0 ) AND (bv_leq rs1_addr_in ldrs1_0) ) AND ( (bv_geq rs2_addr_in ldrs1_1 ) AND (bv_leq rs2_addr_in ldrs1_1) ) ) AND ( NOT ( (bv_geq mem_addr_in_0 mem_addr_in_1 ) AND (bv_leq mem_addr_in_0 mem_addr_in_1) ) ) ) AND ( NOT ( (bv_geq ldrd_0 ldrs1_1 ) AND (bv_leq ldrd_0 ldrs1_1) ) ) ) AND ( NOT ( (bv_geq ldrd_0 ldrs1_0 ) AND (bv_leq ldrd_0 ldrs1_0) ) ) ) AND ( NOT ( (bv_geq ldrd_1 ldrs1_1 ) AND (bv_leq ldrd_1 ldrs1_1) ) ) ) AND ( (bv_geq ldrd_1 ldrs1_0 ) AND (bv_leq ldrd_1 ldrs1_0) ) ) AND ( NOT ( (bv_geq rs1_addr_in rs2_addr_in ) AND (bv_leq rs1_addr_in rs2_addr_in) ) ) ) AND ( NOT ( (bv_geq ldrs1_0 (int2bv 0 ) ) AND (bv_leq ldrs1_0 (int2bv 0 )) ) ) ) AND ( NOT ( (bv_geq ldrs1_1 (int2bv 0 ) ) AND (bv_leq ldrs1_1 (int2bv 0 )) ) ) ) AND ( NOT ( (bv_geq ldrd_0 (int2bv 0 ) ) AND (bv_leq ldrd_0 (int2bv 0 )) ) ) ) AND ( NOT ( (bv_geq ldrd_1 (int2bv 0 ) ) AND (bv_leq ldrd_1 (int2bv 0 )) ) ) ) AND ( NOT ( (bv_geq rs1_rdata_in (int2bv 0 ) ) AND (bv_leq rs1_rdata_in (int2bv 0 )) ) ) ) AND ( NOT ( (bv_geq rs2_rdata_in (int2bv 0 ) ) AND (bv_leq rs2_rdata_in (int2bv 0 )) ) ) ) AND ( (bv_geq (BV_EXTRACT rs1_rdata_in 9 0 ) mem_addr_in_0 ) AND (bv_leq (BV_EXTRACT rs1_rdata_in 9 0 ) mem_addr_in_0) ) ) AND ( (bv_geq (BV_EXTRACT rs2_rdata_in 9 0 ) mem_addr_in_1 ) AND (bv_leq (BV_EXTRACT rs2_rdata_in 9 0 ) mem_addr_in_1) ) ) AND ( (bv_geq (BV_EXTRACT rs1_rdata_in 63 10 ) (int2bv 0 ) ) AND (bv_leq (BV_EXTRACT rs1_rdata_in 63 10 ) (int2bv 0 )) ) ) AND ( (bv_geq (BV_EXTRACT rs2_rdata_in 63 10 ) (int2bv 0 ) ) AND (bv_leq (BV_EXTRACT rs2_rdata_in 63 10 ) (int2bv 0 )) ) ) );
let ste = STE "-e" ckt [] ant cons [];
ste;
printf "ste_r:";
get_ste_result ste "checkOK";
exit 0;
    