circuit RISCVCPUv2 :
  module RISCVCPUv2 :
    input clock : Clock
    input reset : UInt<1>
    output io : { rvfi : { flip rs1_addr_in : UInt<5>, flip rs2_addr_in : UInt<5>, flip rs1_rdata_in : UInt<64>, flip rs2_rdata_in : UInt<64>, flip rst : UInt<1>, flip insn_in : UInt<32>[4], flip mem_addr_in : UInt<10>[2], flip mem_data_in : UInt<32>[2], valid : UInt<1>, insn : UInt<32>, pc_rdata : UInt<64>, pc_wdata : UInt<64>, rs1_addr : UInt<5>, rs2_addr : UInt<5>, rs1_rdata : UInt<64>, rs2_rdata : UInt<64>, rd_addr : UInt<5>, rd_wdata : UInt<64>, mem_addr : UInt<32>, mem_rdata : UInt<64>, mem_wdata : UInt<64>, regs : UInt<64>[32]}}

    reg PC : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CPU.scala 48:19]
    reg Regs : UInt<64>[32], clock with :
      reset => (UInt<1>("h0"), Regs) @[CPU.scala 49:17]
    reg IDEXA : UInt<64>, clock with :
      reset => (UInt<1>("h0"), IDEXA) @[CPU.scala 50:58]
    reg IDEXB : UInt<64>, clock with :
      reset => (UInt<1>("h0"), IDEXB) @[CPU.scala 50:58]
    reg EXMEMB : UInt<64>, clock with :
      reset => (UInt<1>("h0"), EXMEMB) @[CPU.scala 50:58]
    reg EXMEMALUOut : UInt<64>, clock with :
      reset => (UInt<1>("h0"), EXMEMALUOut) @[CPU.scala 50:58]
    reg MEMWBValue : UInt<64>, clock with :
      reset => (UInt<1>("h0"), MEMWBValue) @[CPU.scala 50:58]
    reg DMemory : UInt<32>[1024], clock with :
      reset => (UInt<1>("h0"), DMemory) @[CPU.scala 52:20]
    reg IMemory : UInt<32>[1024], clock with :
      reset => (UInt<1>("h0"), IMemory) @[CPU.scala 53:20]
    reg IFIDIR : UInt<32>, clock with :
      reset => (reset, UInt<32>("h13")) @[CPU.scala 54:49]
    reg IDEXIR : UInt<32>, clock with :
      reset => (reset, UInt<32>("h13")) @[CPU.scala 54:49]
    reg EXMEMIR : UInt<32>, clock with :
      reset => (reset, UInt<32>("h13")) @[CPU.scala 54:49]
    reg MEMWBIR : UInt<32>, clock with :
      reset => (reset, UInt<32>("h13")) @[CPU.scala 54:49]
    wire IFIDrs1 : UInt<5> @[CPU.scala 55:39]
    wire IFIDrs2 : UInt<5> @[CPU.scala 55:39]
    wire MEMWBrd : UInt<5> @[CPU.scala 55:39]
    wire IFIDop : UInt<7> @[CPU.scala 56:46]
    wire IDEXop : UInt<7> @[CPU.scala 56:46]
    wire EXMEMop : UInt<7> @[CPU.scala 56:46]
    wire MEMWBop : UInt<7> @[CPU.scala 56:46]
    reg CurPC : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CPU.scala 57:22]
    reg NextPC : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CPU.scala 58:23]
    reg czh : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CPU.scala 59:20]
    when io.rvfi.rst : @[CPU.scala 61:21]
      Regs[io.rvfi.rs1_addr_in] <= io.rvfi.rs1_rdata_in @[CPU.scala 62:31]
      Regs[io.rvfi.rs2_addr_in] <= io.rvfi.rs2_rdata_in @[CPU.scala 63:31]
      node _IFIDrs1_T = bits(IFIDIR, 19, 15) @[CPU.scala 64:22]
      IFIDrs1 <= _IFIDrs1_T @[CPU.scala 64:13]
      node _IFIDrs2_T = bits(IFIDIR, 24, 20) @[CPU.scala 65:22]
      IFIDrs2 <= _IFIDrs2_T @[CPU.scala 65:13]
      node _IDEXop_T = bits(IDEXIR, 6, 0) @[CPU.scala 66:21]
      IDEXop <= _IDEXop_T @[CPU.scala 66:12]
      node _IFIDop_T = bits(IFIDIR, 6, 0) @[CPU.scala 67:21]
      IFIDop <= _IFIDop_T @[CPU.scala 67:12]
      node _EXMEMop_T = bits(EXMEMIR, 6, 0) @[CPU.scala 68:23]
      EXMEMop <= _EXMEMop_T @[CPU.scala 68:13]
      node _MEMWBop_T = bits(MEMWBIR, 6, 0) @[CPU.scala 69:23]
      MEMWBop <= _MEMWBop_T @[CPU.scala 69:13]
      node _MEMWBrd_T = bits(MEMWBIR, 11, 7) @[CPU.scala 70:23]
      MEMWBrd <= _MEMWBrd_T @[CPU.scala 70:13]
      IMemory[0] <= io.rvfi.insn_in[0] @[CPU.scala 72:18]
      IMemory[1] <= io.rvfi.insn_in[1] @[CPU.scala 72:18]
      IMemory[2] <= io.rvfi.insn_in[2] @[CPU.scala 72:18]
      IMemory[3] <= io.rvfi.insn_in[3] @[CPU.scala 72:18]
      DMemory[io.rvfi.mem_addr_in[0]] <= io.rvfi.mem_data_in[0] @[CPU.scala 75:39]
      DMemory[io.rvfi.mem_addr_in[1]] <= io.rvfi.mem_data_in[1] @[CPU.scala 75:39]
    else :
      node _IFIDrs1_T_1 = bits(IFIDIR, 19, 15) @[CPU.scala 81:22]
      IFIDrs1 <= _IFIDrs1_T_1 @[CPU.scala 81:13]
      node _IFIDrs2_T_1 = bits(IFIDIR, 24, 20) @[CPU.scala 82:22]
      IFIDrs2 <= _IFIDrs2_T_1 @[CPU.scala 82:13]
      node _IDEXop_T_1 = bits(IDEXIR, 6, 0) @[CPU.scala 83:21]
      IDEXop <= _IDEXop_T_1 @[CPU.scala 83:12]
      node _IFIDop_T_1 = bits(IFIDIR, 6, 0) @[CPU.scala 84:21]
      IFIDop <= _IFIDop_T_1 @[CPU.scala 84:12]
      node _EXMEMop_T_1 = bits(EXMEMIR, 6, 0) @[CPU.scala 85:23]
      EXMEMop <= _EXMEMop_T_1 @[CPU.scala 85:13]
      node _MEMWBop_T_1 = bits(MEMWBIR, 6, 0) @[CPU.scala 86:23]
      MEMWBop <= _MEMWBop_T_1 @[CPU.scala 86:13]
      node _MEMWBrd_T_1 = bits(MEMWBIR, 11, 7) @[CPU.scala 87:23]
      MEMWBrd <= _MEMWBrd_T_1 @[CPU.scala 87:13]
      node EXMEMrd = bits(EXMEMIR, 11, 7) @[CPU.scala 89:32]
      node IDEXrd = bits(IDEXIR, 11, 7) @[CPU.scala 90:30]
      node IFID_funct3 = bits(IFIDIR, 14, 12) @[CPU.scala 91:29]
      node _bypassAFromWB_T = eq(IFIDrs1, MEMWBrd) @[CPU.scala 94:16]
      node _bypassAFromWB_T_1 = neq(IFIDrs1, UInt<1>("h0")) @[CPU.scala 94:41]
      node _bypassAFromWB_T_2 = and(_bypassAFromWB_T, _bypassAFromWB_T_1) @[CPU.scala 94:29]
      node _bypassAFromWB_T_3 = eq(MEMWBop, UInt<7>("h33")) @[CPU.scala 94:62]
      node _bypassAFromWB_T_4 = eq(MEMWBop, UInt<7>("h3")) @[CPU.scala 94:83]
      node _bypassAFromWB_T_5 = or(_bypassAFromWB_T_3, _bypassAFromWB_T_4) @[CPU.scala 94:72]
      node bypassAFromWB = and(_bypassAFromWB_T_2, _bypassAFromWB_T_5) @[CPU.scala 94:50]
      node _bypassBFromWB_T = eq(IFIDrs2, MEMWBrd) @[CPU.scala 96:16]
      node _bypassBFromWB_T_1 = neq(IFIDrs2, UInt<1>("h0")) @[CPU.scala 96:41]
      node _bypassBFromWB_T_2 = and(_bypassBFromWB_T, _bypassBFromWB_T_1) @[CPU.scala 96:29]
      node _bypassBFromWB_T_3 = eq(MEMWBop, UInt<7>("h33")) @[CPU.scala 96:62]
      node _bypassBFromWB_T_4 = eq(MEMWBop, UInt<7>("h3")) @[CPU.scala 96:83]
      node _bypassBFromWB_T_5 = or(_bypassBFromWB_T_3, _bypassBFromWB_T_4) @[CPU.scala 96:72]
      node bypassBFromWB = and(_bypassBFromWB_T_2, _bypassBFromWB_T_5) @[CPU.scala 96:50]
      node _bypassAFromMEM_T = eq(IFIDrs1, EXMEMrd) @[CPU.scala 98:16]
      node _bypassAFromMEM_T_1 = neq(IFIDrs1, UInt<1>("h0")) @[CPU.scala 98:41]
      node _bypassAFromMEM_T_2 = and(_bypassAFromMEM_T, _bypassAFromMEM_T_1) @[CPU.scala 98:29]
      node _bypassAFromMEM_T_3 = eq(EXMEMop, UInt<7>("h33")) @[CPU.scala 98:62]
      node bypassAFromMEM = and(_bypassAFromMEM_T_2, _bypassAFromMEM_T_3) @[CPU.scala 98:50]
      node _bypassBFromMEM_T = eq(IFIDrs2, EXMEMrd) @[CPU.scala 100:16]
      node _bypassBFromMEM_T_1 = neq(IFIDrs2, UInt<1>("h0")) @[CPU.scala 100:41]
      node _bypassBFromMEM_T_2 = and(_bypassBFromMEM_T, _bypassBFromMEM_T_1) @[CPU.scala 100:29]
      node _bypassBFromMEM_T_3 = eq(EXMEMop, UInt<7>("h33")) @[CPU.scala 100:62]
      node bypassBFromMEM = and(_bypassBFromMEM_T_2, _bypassBFromMEM_T_3) @[CPU.scala 100:50]
      node _bypassAFromEX_T = eq(IFIDrs1, IDEXrd) @[CPU.scala 102:16]
      node _bypassAFromEX_T_1 = neq(IFIDrs1, UInt<1>("h0")) @[CPU.scala 102:40]
      node _bypassAFromEX_T_2 = and(_bypassAFromEX_T, _bypassAFromEX_T_1) @[CPU.scala 102:28]
      node _bypassAFromEX_T_3 = eq(IDEXop, UInt<7>("h33")) @[CPU.scala 102:60]
      node bypassAFromEX = and(_bypassAFromEX_T_2, _bypassAFromEX_T_3) @[CPU.scala 102:49]
      node _bypassBFromEX_T = eq(IFIDrs2, IDEXrd) @[CPU.scala 104:16]
      node _bypassBFromEX_T_1 = neq(IFIDrs2, UInt<1>("h0")) @[CPU.scala 104:40]
      node _bypassBFromEX_T_2 = and(_bypassBFromEX_T, _bypassBFromEX_T_1) @[CPU.scala 104:28]
      node _bypassBFromEX_T_3 = eq(IDEXop, UInt<7>("h33")) @[CPU.scala 104:60]
      node bypassBFromEX = and(_bypassBFromEX_T_2, _bypassBFromEX_T_3) @[CPU.scala 104:49]
      node _stall_T = eq(EXMEMop, UInt<7>("h3")) @[CPU.scala 107:16]
      node _stall_T_1 = eq(IFIDrs1, EXMEMrd) @[CPU.scala 107:38]
      node _stall_T_2 = neq(IFIDrs1, UInt<1>("h0")) @[CPU.scala 107:63]
      node _stall_T_3 = and(_stall_T_1, _stall_T_2) @[CPU.scala 107:51]
      node _stall_T_4 = eq(IFIDrs2, EXMEMrd) @[CPU.scala 107:86]
      node _stall_T_5 = neq(IFIDrs2, UInt<1>("h0")) @[CPU.scala 107:111]
      node _stall_T_6 = and(_stall_T_4, _stall_T_5) @[CPU.scala 107:99]
      node _stall_T_7 = or(_stall_T_3, _stall_T_6) @[CPU.scala 107:73]
      node _stall_T_8 = and(_stall_T, _stall_T_7) @[CPU.scala 107:24]
      node _stall_T_9 = eq(IDEXop, UInt<7>("h3")) @[CPU.scala 109:15]
      node _stall_T_10 = eq(IFIDrs1, IDEXrd) @[CPU.scala 109:37]
      node _stall_T_11 = neq(IFIDrs1, UInt<1>("h0")) @[CPU.scala 109:61]
      node _stall_T_12 = and(_stall_T_10, _stall_T_11) @[CPU.scala 109:49]
      node _stall_T_13 = eq(IFIDrs2, IDEXrd) @[CPU.scala 109:84]
      node _stall_T_14 = neq(IFIDrs2, UInt<1>("h0")) @[CPU.scala 109:108]
      node _stall_T_15 = and(_stall_T_13, _stall_T_14) @[CPU.scala 109:96]
      node _stall_T_16 = or(_stall_T_12, _stall_T_15) @[CPU.scala 109:71]
      node _stall_T_17 = and(_stall_T_9, _stall_T_16) @[CPU.scala 109:23]
      node stall = or(_stall_T_8, _stall_T_17) @[CPU.scala 108:7]
      wire A : UInt<64>
      A <= UInt<64>("h0")
      wire B : UInt<64>
      B <= UInt<64>("h0")
      node _takeBranch_T = eq(IFIDop, UInt<7>("h63")) @[CPU.scala 113:30]
      node _takeBranch_T_1 = eq(IFID_funct3, UInt<1>("h0")) @[CPU.scala 113:55]
      node _takeBranch_T_2 = and(_takeBranch_T, _takeBranch_T_1) @[CPU.scala 113:39]
      node _takeBranch_T_3 = eq(A, B) @[CPU.scala 113:70]
      node takeBranch = and(_takeBranch_T_2, _takeBranch_T_3) @[CPU.scala 113:64]
      node MEMWBrs1 = bits(MEMWBIR, 19, 15) @[CPU.scala 116:27]
      node MEMWBrs2 = bits(MEMWBIR, 24, 20) @[CPU.scala 117:27]
      node _T = not(stall) @[CPU.scala 121:11]
      node _T_1 = bits(_T, 0, 0) @[CPU.scala 121:19]
      when _T_1 : @[CPU.scala 121:27]
        node _T_2 = not(takeBranch) @[CPU.scala 122:13]
        node _T_3 = bits(_T_2, 0, 0) @[CPU.scala 122:26]
        when _T_3 : @[CPU.scala 122:34]
          node _IFIDIR_T = dshr(PC, UInt<2>("h2")) @[CPU.scala 125:31]
          node _IFIDIR_T_1 = bits(_IFIDIR_T, 9, 0)
          IFIDIR <= IMemory[_IFIDIR_T_1] @[CPU.scala 125:16]
          node _PC_T = add(PC, UInt<3>("h4")) @[CPU.scala 126:18]
          node _PC_T_1 = tail(_PC_T, 1) @[CPU.scala 126:18]
          PC <= _PC_T_1 @[CPU.scala 126:12]
          NextPC <= PC @[CPU.scala 127:16]
        else :
          IFIDIR <= UInt<32>("h13") @[CPU.scala 129:16]
          node _branchTarget_T = asSInt(CurPC) @[CPU.scala 130:35]
          node _branchTarget_T_1 = bits(IFIDIR, 31, 31) @[CPU.scala 131:17]
          node _branchTarget_T_2 = bits(IFIDIR, 30, 25) @[CPU.scala 133:17]
          node _branchTarget_T_3 = bits(IFIDIR, 11, 7) @[CPU.scala 134:17]
          node branchTarget_lo = cat(_branchTarget_T_2, _branchTarget_T_3) @[Cat.scala 33:92]
          node branchTarget_hi = cat(_branchTarget_T_1, UInt<1>("h0")) @[Cat.scala 33:92]
          node _branchTarget_T_4 = cat(branchTarget_hi, branchTarget_lo) @[Cat.scala 33:92]
          node _branchTarget_T_5 = asSInt(_branchTarget_T_4) @[CPU.scala 135:11]
          node _branchTarget_T_6 = add(_branchTarget_T, _branchTarget_T_5) @[CPU.scala 130:42]
          node _branchTarget_T_7 = tail(_branchTarget_T_6, 1) @[CPU.scala 130:42]
          node _branchTarget_T_8 = asSInt(_branchTarget_T_7) @[CPU.scala 130:42]
          node branchTarget = asUInt(_branchTarget_T_8) @[CPU.scala 135:19]
          node _czh_T = bits(IFIDIR, 31, 31) @[CPU.scala 137:17]
          node _czh_T_1 = bits(IFIDIR, 30, 25) @[CPU.scala 139:17]
          node _czh_T_2 = bits(IFIDIR, 11, 7) @[CPU.scala 140:17]
          node czh_lo = cat(_czh_T_1, _czh_T_2) @[Cat.scala 33:92]
          node czh_hi = cat(_czh_T, UInt<1>("h0")) @[Cat.scala 33:92]
          node _czh_T_3 = cat(czh_hi, czh_lo) @[Cat.scala 33:92]
          node _czh_T_4 = add(UInt<1>("h0"), _czh_T_3) @[CPU.scala 136:17]
          node _czh_T_5 = tail(_czh_T_4, 1) @[CPU.scala 136:17]
          czh <= _czh_T_5 @[CPU.scala 136:12]
          PC <= branchTarget @[CPU.scala 142:12]
          NextPC <= branchTarget @[CPU.scala 143:16]
        CurPC <= PC @[CPU.scala 145:13]
        when bypassAFromEX : @[CPU.scala 148:27]
          node _IDEXA_T = add(IDEXA, IDEXB) @[CPU.scala 149:24]
          node _IDEXA_T_1 = tail(_IDEXA_T, 1) @[CPU.scala 149:24]
          IDEXA <= _IDEXA_T_1 @[CPU.scala 149:15]
          node _A_T = add(IDEXA, IDEXB) @[CPU.scala 150:20]
          node _A_T_1 = tail(_A_T, 1) @[CPU.scala 150:20]
          A <= _A_T_1 @[CPU.scala 150:11]
        else :
          when bypassAFromMEM : @[CPU.scala 151:34]
            IDEXA <= EXMEMALUOut @[CPU.scala 152:15]
            A <= EXMEMALUOut @[CPU.scala 153:11]
          else :
            when bypassAFromWB : @[CPU.scala 154:33]
              IDEXA <= MEMWBValue @[CPU.scala 155:15]
              A <= MEMWBValue @[CPU.scala 156:11]
            else :
              IDEXA <= Regs[IFIDrs1] @[CPU.scala 158:15]
              A <= Regs[IFIDrs1] @[CPU.scala 159:11]
        when bypassBFromEX : @[CPU.scala 161:27]
          node _IDEXB_T = add(IDEXB, IDEXA) @[CPU.scala 162:24]
          node _IDEXB_T_1 = tail(_IDEXB_T, 1) @[CPU.scala 162:24]
          IDEXB <= _IDEXB_T_1 @[CPU.scala 162:15]
          node _B_T = add(IDEXB, IDEXA) @[CPU.scala 163:20]
          node _B_T_1 = tail(_B_T, 1) @[CPU.scala 163:20]
          B <= _B_T_1 @[CPU.scala 163:11]
        else :
          when bypassBFromMEM : @[CPU.scala 164:34]
            IDEXB <= EXMEMALUOut @[CPU.scala 165:15]
            B <= EXMEMALUOut @[CPU.scala 166:11]
          else :
            when bypassBFromWB : @[CPU.scala 167:33]
              IDEXB <= MEMWBValue @[CPU.scala 168:15]
              B <= MEMWBValue @[CPU.scala 169:11]
            else :
              IDEXB <= Regs[IFIDrs2] @[CPU.scala 171:15]
              B <= Regs[IFIDrs2] @[CPU.scala 172:11]
        IDEXIR <= IFIDIR @[CPU.scala 174:14]
      else :
        IDEXIR <= UInt<32>("h13") @[CPU.scala 176:14]
        IDEXA <= UInt<1>("h0") @[CPU.scala 177:13]
        IDEXB <= UInt<1>("h0") @[CPU.scala 178:13]
      node _T_4 = eq(IDEXop, UInt<7>("h3")) @[CPU.scala 182:17]
      when _T_4 : @[CPU.scala 182:25]
        node _EXMEMALUOut_T = asSInt(IDEXA) @[CPU.scala 183:29]
        node _EXMEMALUOut_T_1 = bits(IDEXIR, 31, 20) @[CPU.scala 183:44]
        node _EXMEMALUOut_T_2 = asSInt(_EXMEMALUOut_T_1) @[CPU.scala 183:53]
        node _EXMEMALUOut_T_3 = add(_EXMEMALUOut_T, _EXMEMALUOut_T_2) @[CPU.scala 183:36]
        node _EXMEMALUOut_T_4 = tail(_EXMEMALUOut_T_3, 1) @[CPU.scala 183:36]
        node _EXMEMALUOut_T_5 = asSInt(_EXMEMALUOut_T_4) @[CPU.scala 183:36]
        node _EXMEMALUOut_T_6 = asUInt(_EXMEMALUOut_T_5) @[CPU.scala 183:61]
        EXMEMALUOut <= _EXMEMALUOut_T_6 @[CPU.scala 183:19]
      else :
        node _T_5 = eq(IDEXop, UInt<7>("h23")) @[CPU.scala 184:23]
        when _T_5 : @[CPU.scala 184:31]
          node _EXMEMALUOut_T_7 = asSInt(IDEXA) @[CPU.scala 185:29]
          node _EXMEMALUOut_T_8 = bits(IDEXIR, 31, 25) @[CPU.scala 186:15]
          node _EXMEMALUOut_T_9 = bits(IDEXIR, 11, 7) @[CPU.scala 187:15]
          node _EXMEMALUOut_T_10 = cat(_EXMEMALUOut_T_8, _EXMEMALUOut_T_9) @[Cat.scala 33:92]
          node _EXMEMALUOut_T_11 = asSInt(_EXMEMALUOut_T_10) @[CPU.scala 188:9]
          node _EXMEMALUOut_T_12 = add(_EXMEMALUOut_T_7, _EXMEMALUOut_T_11) @[CPU.scala 185:36]
          node _EXMEMALUOut_T_13 = tail(_EXMEMALUOut_T_12, 1) @[CPU.scala 185:36]
          node _EXMEMALUOut_T_14 = asSInt(_EXMEMALUOut_T_13) @[CPU.scala 185:36]
          node _EXMEMALUOut_T_15 = asUInt(_EXMEMALUOut_T_14) @[CPU.scala 188:17]
          EXMEMALUOut <= _EXMEMALUOut_T_15 @[CPU.scala 185:19]
        else :
          node _T_6 = eq(IDEXop, UInt<7>("h33")) @[CPU.scala 189:23]
          when _T_6 : @[CPU.scala 189:34]
            node _EXMEMALUOut_T_16 = add(IDEXA, IDEXB) @[CPU.scala 192:28]
            node _EXMEMALUOut_T_17 = tail(_EXMEMALUOut_T_16, 1) @[CPU.scala 192:28]
            EXMEMALUOut <= _EXMEMALUOut_T_17 @[CPU.scala 192:19]
      EXMEMIR <= IDEXIR @[CPU.scala 196:13]
      EXMEMB <= IDEXB @[CPU.scala 197:12]
      node _T_7 = eq(EXMEMop, UInt<7>("h33")) @[CPU.scala 200:18]
      when _T_7 : @[CPU.scala 200:29]
        MEMWBValue <= EXMEMALUOut @[CPU.scala 201:18]
      else :
        node _T_8 = eq(EXMEMop, UInt<7>("h3")) @[CPU.scala 202:24]
        when _T_8 : @[CPU.scala 202:32]
          node _MEMWBValue_T = bits(EXMEMALUOut, 9, 0)
          MEMWBValue <= DMemory[_MEMWBValue_T] @[CPU.scala 203:18]
        else :
          node _T_9 = eq(EXMEMop, UInt<7>("h23")) @[CPU.scala 204:24]
          when _T_9 : @[CPU.scala 204:32]
            node _T_10 = bits(EXMEMALUOut, 9, 0)
            DMemory[_T_10] <= EXMEMB @[CPU.scala 205:37]
      MEMWBIR <= EXMEMIR @[CPU.scala 208:13]
      node _T_11 = eq(MEMWBop, UInt<7>("h3")) @[CPU.scala 214:20]
      node _T_12 = eq(MEMWBop, UInt<7>("h33")) @[CPU.scala 214:40]
      node _T_13 = or(_T_11, _T_12) @[CPU.scala 214:28]
      node _T_14 = neq(MEMWBrd, UInt<1>("h0")) @[CPU.scala 214:64]
      node _T_15 = and(_T_13, _T_14) @[CPU.scala 214:52]
      when _T_15 : @[CPU.scala 214:74]
        Regs[MEMWBrd] <= MEMWBValue @[CPU.scala 215:21]
    io.rvfi.rd_wdata <= MEMWBValue @[CPU.scala 219:20]
    io.rvfi.regs <= Regs @[CPU.scala 221:16]
    io.rvfi.insn <= MEMWBIR @[CPU.scala 222:16]
    io.rvfi.valid <= UInt<1>("h0") @[CPU.scala 223:17]
    io.rvfi.pc_rdata <= CurPC @[CPU.scala 226:20]
    io.rvfi.pc_wdata <= PC @[CPU.scala 228:20]
    io.rvfi.rs1_addr <= IFIDrs1 @[CPU.scala 230:20]
    io.rvfi.rs2_addr <= IFIDrs2 @[CPU.scala 232:20]
    io.rvfi.rs1_rdata <= IDEXA @[CPU.scala 234:21]
    io.rvfi.rs2_rdata <= IDEXB @[CPU.scala 236:21]
    io.rvfi.rd_addr <= MEMWBrd @[CPU.scala 238:19]
    io.rvfi.mem_addr <= EXMEMALUOut @[CPU.scala 240:20]
    io.rvfi.mem_rdata <= MEMWBValue @[CPU.scala 242:21]
    io.rvfi.mem_wdata <= DMemory[1] @[CPU.scala 244:21]

