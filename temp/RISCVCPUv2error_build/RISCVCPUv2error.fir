circuit RISCVCPUv2error :
  module RISCVCPUv2error :
    input clock : Clock
    input reset : UInt<1>
    output io : { rvfi : { flip rs1_addr_in : UInt<5>, flip rs2_addr_in : UInt<5>, flip rs1_rdata_in : UInt<64>, flip rs2_rdata_in : UInt<64>, flip rst : UInt<1>, flip insn_in : UInt<32>[4], flip mem_addr_in : UInt<10>[2], flip mem_data_in : UInt<32>[2], valid : UInt<1>, insn : UInt<32>, pc_rdata : UInt<64>, pc_wdata : UInt<64>, rs1_addr : UInt<5>, rs2_addr : UInt<5>, rs1_rdata : UInt<64>, rs2_rdata : UInt<64>, rd_addr : UInt<5>, rd_wdata : UInt<64>, mem_addr : UInt<32>, mem_rdata : UInt<64>, mem_wdata : UInt<64>, regs : UInt<64>[32]}}

    reg PC : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CPUerror.scala 18:19]
    reg Regs : UInt<64>[32], clock with :
      reset => (UInt<1>("h0"), Regs) @[CPUerror.scala 19:17]
    reg IDEXA : UInt<64>, clock with :
      reset => (UInt<1>("h0"), IDEXA) @[CPUerror.scala 20:58]
    reg IDEXB : UInt<64>, clock with :
      reset => (UInt<1>("h0"), IDEXB) @[CPUerror.scala 20:58]
    reg EXMEMB : UInt<64>, clock with :
      reset => (UInt<1>("h0"), EXMEMB) @[CPUerror.scala 20:58]
    reg EXMEMALUOut : UInt<64>, clock with :
      reset => (UInt<1>("h0"), EXMEMALUOut) @[CPUerror.scala 20:58]
    reg MEMWBValue : UInt<64>, clock with :
      reset => (UInt<1>("h0"), MEMWBValue) @[CPUerror.scala 20:58]
    reg DMemory : UInt<32>[1024], clock with :
      reset => (UInt<1>("h0"), DMemory) @[CPUerror.scala 22:20]
    reg IMemory : UInt<32>[1024], clock with :
      reset => (UInt<1>("h0"), IMemory) @[CPUerror.scala 23:20]
    reg IFIDIR : UInt<32>, clock with :
      reset => (reset, UInt<32>("h13")) @[CPUerror.scala 24:49]
    reg IDEXIR : UInt<32>, clock with :
      reset => (reset, UInt<32>("h13")) @[CPUerror.scala 24:49]
    reg EXMEMIR : UInt<32>, clock with :
      reset => (reset, UInt<32>("h13")) @[CPUerror.scala 24:49]
    reg MEMWBIR : UInt<32>, clock with :
      reset => (reset, UInt<32>("h13")) @[CPUerror.scala 24:49]
    wire IFIDrs1 : UInt<5> @[CPUerror.scala 25:39]
    wire IFIDrs2 : UInt<5> @[CPUerror.scala 25:39]
    wire MEMWBrd : UInt<5> @[CPUerror.scala 25:39]
    wire IFIDop : UInt<7> @[CPUerror.scala 26:46]
    wire IDEXop : UInt<7> @[CPUerror.scala 26:46]
    wire EXMEMop : UInt<7> @[CPUerror.scala 26:46]
    wire MEMWBop : UInt<7> @[CPUerror.scala 26:46]
    reg CurPC : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CPUerror.scala 27:22]
    reg NextPC : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CPUerror.scala 28:23]
    when io.rvfi.rst : @[CPUerror.scala 30:21]
      Regs[io.rvfi.rs1_addr_in] <= io.rvfi.rs1_rdata_in @[CPUerror.scala 31:31]
      Regs[io.rvfi.rs2_addr_in] <= io.rvfi.rs2_rdata_in @[CPUerror.scala 32:31]
      node _IFIDrs1_T = bits(IFIDIR, 19, 15) @[CPUerror.scala 33:22]
      IFIDrs1 <= _IFIDrs1_T @[CPUerror.scala 33:13]
      node _IFIDrs2_T = bits(IFIDIR, 24, 20) @[CPUerror.scala 34:22]
      IFIDrs2 <= _IFIDrs2_T @[CPUerror.scala 34:13]
      node _IDEXop_T = bits(IDEXIR, 6, 0) @[CPUerror.scala 35:21]
      IDEXop <= _IDEXop_T @[CPUerror.scala 35:12]
      node _IFIDop_T = bits(IFIDIR, 6, 0) @[CPUerror.scala 36:21]
      IFIDop <= _IFIDop_T @[CPUerror.scala 36:12]
      node _EXMEMop_T = bits(EXMEMIR, 6, 0) @[CPUerror.scala 37:23]
      EXMEMop <= _EXMEMop_T @[CPUerror.scala 37:13]
      node _MEMWBop_T = bits(MEMWBIR, 6, 0) @[CPUerror.scala 38:23]
      MEMWBop <= _MEMWBop_T @[CPUerror.scala 38:13]
      node _MEMWBrd_T = bits(MEMWBIR, 11, 7) @[CPUerror.scala 39:23]
      MEMWBrd <= _MEMWBrd_T @[CPUerror.scala 39:13]
      IMemory[0] <= io.rvfi.insn_in[0] @[CPUerror.scala 41:18]
      IMemory[1] <= io.rvfi.insn_in[1] @[CPUerror.scala 41:18]
      IMemory[2] <= io.rvfi.insn_in[2] @[CPUerror.scala 41:18]
      IMemory[3] <= io.rvfi.insn_in[3] @[CPUerror.scala 41:18]
      DMemory[io.rvfi.mem_addr_in[0]] <= io.rvfi.mem_data_in[0] @[CPUerror.scala 44:39]
      DMemory[io.rvfi.mem_addr_in[1]] <= io.rvfi.mem_data_in[1] @[CPUerror.scala 44:39]
    else :
      node _IFIDrs1_T_1 = bits(IFIDIR, 19, 15) @[CPUerror.scala 50:23]
      IFIDrs1 <= _IFIDrs1_T_1 @[CPUerror.scala 50:14]
      node _IFIDrs2_T_1 = bits(IFIDIR, 24, 20) @[CPUerror.scala 51:20]
      IFIDrs2 <= _IFIDrs2_T_1 @[CPUerror.scala 51:11]
      node _IDEXop_T_1 = bits(IDEXIR, 6, 0) @[CPUerror.scala 52:19]
      IDEXop <= _IDEXop_T_1 @[CPUerror.scala 52:10]
      node _IFIDop_T_1 = bits(IFIDIR, 6, 0) @[CPUerror.scala 53:19]
      IFIDop <= _IFIDop_T_1 @[CPUerror.scala 53:10]
      node _EXMEMop_T_1 = bits(EXMEMIR, 6, 0) @[CPUerror.scala 54:21]
      EXMEMop <= _EXMEMop_T_1 @[CPUerror.scala 54:11]
      node _MEMWBop_T_1 = bits(MEMWBIR, 6, 0) @[CPUerror.scala 55:21]
      MEMWBop <= _MEMWBop_T_1 @[CPUerror.scala 55:11]
      node _MEMWBrd_T_1 = bits(MEMWBIR, 11, 7) @[CPUerror.scala 56:21]
      MEMWBrd <= _MEMWBrd_T_1 @[CPUerror.scala 56:11]
      node EXMEMrd = bits(EXMEMIR, 11, 7) @[CPUerror.scala 58:30]
      node IDEXrd = bits(IDEXIR, 11, 7) @[CPUerror.scala 59:29]
      node IFID_funct3 = bits(IFIDIR, 14, 12) @[CPUerror.scala 60:29]
      node _bypassAFromWB_T = eq(IFIDrs1, MEMWBrd) @[CPUerror.scala 62:33]
      node _bypassAFromWB_T_1 = neq(IFIDrs1, UInt<1>("h0")) @[CPUerror.scala 62:58]
      node _bypassAFromWB_T_2 = and(_bypassAFromWB_T, _bypassAFromWB_T_1) @[CPUerror.scala 62:46]
      node _bypassAFromWB_T_3 = eq(MEMWBop, UInt<7>("h33")) @[CPUerror.scala 62:79]
      node _bypassAFromWB_T_4 = eq(MEMWBop, UInt<7>("h3")) @[CPUerror.scala 62:100]
      node _bypassAFromWB_T_5 = or(_bypassAFromWB_T_3, _bypassAFromWB_T_4) @[CPUerror.scala 62:89]
      node bypassAFromWB = and(_bypassAFromWB_T_2, _bypassAFromWB_T_5) @[CPUerror.scala 62:67]
      node _bypassBFromWB_T = eq(IFIDrs2, MEMWBrd) @[CPUerror.scala 63:33]
      node _bypassBFromWB_T_1 = neq(IFIDrs2, UInt<1>("h0")) @[CPUerror.scala 63:58]
      node _bypassBFromWB_T_2 = and(_bypassBFromWB_T, _bypassBFromWB_T_1) @[CPUerror.scala 63:46]
      node _bypassBFromWB_T_3 = eq(MEMWBop, UInt<7>("h33")) @[CPUerror.scala 63:79]
      node _bypassBFromWB_T_4 = eq(MEMWBop, UInt<7>("h3")) @[CPUerror.scala 63:100]
      node _bypassBFromWB_T_5 = or(_bypassBFromWB_T_3, _bypassBFromWB_T_4) @[CPUerror.scala 63:89]
      node bypassBFromWB = and(_bypassBFromWB_T_2, _bypassBFromWB_T_5) @[CPUerror.scala 63:67]
      node _bypassAFromMEM_T = eq(IFIDrs1, EXMEMrd) @[CPUerror.scala 64:33]
      node _bypassAFromMEM_T_1 = neq(IFIDrs1, UInt<1>("h0")) @[CPUerror.scala 64:58]
      node _bypassAFromMEM_T_2 = and(_bypassAFromMEM_T, _bypassAFromMEM_T_1) @[CPUerror.scala 64:46]
      node _bypassAFromMEM_T_3 = eq(EXMEMop, UInt<7>("h33")) @[CPUerror.scala 64:79]
      node bypassAFromMEM = and(_bypassAFromMEM_T_2, _bypassAFromMEM_T_3) @[CPUerror.scala 64:67]
      node _bypassBFromMEM_T = eq(IFIDrs2, EXMEMrd) @[CPUerror.scala 65:33]
      node _bypassBFromMEM_T_1 = neq(IFIDrs2, UInt<1>("h0")) @[CPUerror.scala 65:58]
      node _bypassBFromMEM_T_2 = and(_bypassBFromMEM_T, _bypassBFromMEM_T_1) @[CPUerror.scala 65:46]
      node _bypassBFromMEM_T_3 = eq(EXMEMop, UInt<7>("h33")) @[CPUerror.scala 65:79]
      node bypassBFromMEM = and(_bypassBFromMEM_T_2, _bypassBFromMEM_T_3) @[CPUerror.scala 65:67]
      node _bypassAFromEX_T = eq(IFIDrs1, IDEXrd) @[CPUerror.scala 66:33]
      node _bypassAFromEX_T_1 = neq(IFIDrs1, UInt<1>("h0")) @[CPUerror.scala 66:57]
      node _bypassAFromEX_T_2 = and(_bypassAFromEX_T, _bypassAFromEX_T_1) @[CPUerror.scala 66:45]
      node _bypassAFromEX_T_3 = eq(IDEXop, UInt<7>("h33")) @[CPUerror.scala 66:77]
      node bypassAFromEX = and(_bypassAFromEX_T_2, _bypassAFromEX_T_3) @[CPUerror.scala 66:66]
      node _bypassBFromEX_T = eq(IFIDrs2, IDEXrd) @[CPUerror.scala 67:33]
      node _bypassBFromEX_T_1 = neq(IFIDrs2, UInt<1>("h0")) @[CPUerror.scala 67:57]
      node _bypassBFromEX_T_2 = and(_bypassBFromEX_T, _bypassBFromEX_T_1) @[CPUerror.scala 67:45]
      node _bypassBFromEX_T_3 = eq(IDEXop, UInt<7>("h33")) @[CPUerror.scala 67:77]
      node bypassBFromEX = and(_bypassBFromEX_T_2, _bypassBFromEX_T_3) @[CPUerror.scala 67:66]
      node _stall_T = eq(EXMEMop, UInt<7>("h3")) @[CPUerror.scala 70:14]
      node _stall_T_1 = eq(IFIDrs1, EXMEMrd) @[CPUerror.scala 70:36]
      node _stall_T_2 = neq(IFIDrs1, UInt<1>("h0")) @[CPUerror.scala 70:61]
      node _stall_T_3 = and(_stall_T_1, _stall_T_2) @[CPUerror.scala 70:49]
      node _stall_T_4 = eq(IFIDrs2, EXMEMrd) @[CPUerror.scala 70:84]
      node _stall_T_5 = neq(IFIDrs2, UInt<1>("h0")) @[CPUerror.scala 70:109]
      node _stall_T_6 = and(_stall_T_4, _stall_T_5) @[CPUerror.scala 70:97]
      node _stall_T_7 = or(_stall_T_3, _stall_T_6) @[CPUerror.scala 70:71]
      node _stall_T_8 = and(_stall_T, _stall_T_7) @[CPUerror.scala 70:22]
      node _stall_T_9 = eq(IDEXop, UInt<7>("h3")) @[CPUerror.scala 72:13]
      node _stall_T_10 = eq(IFIDrs1, IDEXrd) @[CPUerror.scala 72:35]
      node _stall_T_11 = neq(IFIDrs1, UInt<1>("h0")) @[CPUerror.scala 72:59]
      node _stall_T_12 = and(_stall_T_10, _stall_T_11) @[CPUerror.scala 72:47]
      node _stall_T_13 = eq(IFIDrs2, IDEXrd) @[CPUerror.scala 72:82]
      node _stall_T_14 = neq(IFIDrs2, UInt<1>("h0")) @[CPUerror.scala 72:106]
      node _stall_T_15 = and(_stall_T_13, _stall_T_14) @[CPUerror.scala 72:94]
      node _stall_T_16 = or(_stall_T_12, _stall_T_15) @[CPUerror.scala 72:69]
      node _stall_T_17 = and(_stall_T_9, _stall_T_16) @[CPUerror.scala 72:21]
      node stall = or(_stall_T_8, _stall_T_17) @[CPUerror.scala 71:7]
      wire A : UInt<64>
      A <= UInt<64>("h0")
      wire B : UInt<64>
      B <= UInt<64>("h0")
      node _takeBranch_T = eq(IFIDop, UInt<7>("h63")) @[CPUerror.scala 76:28]
      node _takeBranch_T_1 = eq(IFID_funct3, UInt<1>("h0")) @[CPUerror.scala 76:53]
      node _takeBranch_T_2 = and(_takeBranch_T, _takeBranch_T_1) @[CPUerror.scala 76:37]
      node _takeBranch_T_3 = eq(Regs[IFIDrs1], Regs[IFIDrs2]) @[CPUerror.scala 76:80]
      node takeBranch = and(_takeBranch_T_2, _takeBranch_T_3) @[CPUerror.scala 76:62]
      node MEMWBrs1 = bits(MEMWBIR, 19, 15) @[CPUerror.scala 79:25]
      node MEMWBrs2 = bits(MEMWBIR, 24, 20) @[CPUerror.scala 80:25]
      node _T = not(stall) @[CPUerror.scala 85:9]
      node _T_1 = bits(_T, 0, 0) @[CPUerror.scala 85:17]
      when _T_1 : @[CPUerror.scala 85:25]
        node _T_2 = not(takeBranch) @[CPUerror.scala 86:11]
        node _T_3 = bits(_T_2, 0, 0) @[CPUerror.scala 86:24]
        when _T_3 : @[CPUerror.scala 86:32]
          node _IFIDIR_T = dshr(PC, UInt<2>("h2")) @[CPUerror.scala 89:29]
          node _IFIDIR_T_1 = bits(_IFIDIR_T, 9, 0)
          IFIDIR <= IMemory[_IFIDIR_T_1] @[CPUerror.scala 89:14]
          node _PC_T = add(PC, UInt<3>("h4")) @[CPUerror.scala 90:16]
          node _PC_T_1 = tail(_PC_T, 1) @[CPUerror.scala 90:16]
          PC <= _PC_T_1 @[CPUerror.scala 90:10]
          NextPC <= PC @[CPUerror.scala 91:14]
        else :
          IFIDIR <= UInt<32>("h13") @[CPUerror.scala 93:14]
          node _branchTarget_T = asSInt(CurPC) @[CPUerror.scala 94:33]
          node _branchTarget_T_1 = bits(IFIDIR, 31, 31) @[CPUerror.scala 94:52]
          node _branchTarget_T_2 = bits(IFIDIR, 30, 25) @[CPUerror.scala 94:77]
          node _branchTarget_T_3 = bits(IFIDIR, 11, 7) @[CPUerror.scala 94:93]
          node branchTarget_lo = cat(_branchTarget_T_2, _branchTarget_T_3) @[Cat.scala 33:92]
          node branchTarget_hi = cat(_branchTarget_T_1, UInt<1>("h0")) @[Cat.scala 33:92]
          node _branchTarget_T_4 = cat(branchTarget_hi, branchTarget_lo) @[Cat.scala 33:92]
          node _branchTarget_T_5 = asSInt(_branchTarget_T_4) @[CPUerror.scala 94:103]
          node _branchTarget_T_6 = add(_branchTarget_T, _branchTarget_T_5) @[CPUerror.scala 94:40]
          node _branchTarget_T_7 = tail(_branchTarget_T_6, 1) @[CPUerror.scala 94:40]
          node _branchTarget_T_8 = asSInt(_branchTarget_T_7) @[CPUerror.scala 94:40]
          node branchTarget = asUInt(_branchTarget_T_8) @[CPUerror.scala 94:111]
          PC <= branchTarget @[CPUerror.scala 95:10]
          NextPC <= branchTarget @[CPUerror.scala 96:14]
        CurPC <= PC @[CPUerror.scala 98:11]
        when bypassAFromEX : @[CPUerror.scala 101:25]
          node _IDEXA_T = add(IDEXA, IDEXB) @[CPUerror.scala 102:22]
          node _IDEXA_T_1 = tail(_IDEXA_T, 1) @[CPUerror.scala 102:22]
          IDEXA <= _IDEXA_T_1 @[CPUerror.scala 102:13]
          node _A_T = add(IDEXA, IDEXB) @[CPUerror.scala 103:18]
          node _A_T_1 = tail(_A_T, 1) @[CPUerror.scala 103:18]
          A <= _A_T_1 @[CPUerror.scala 103:9]
        else :
          when bypassAFromMEM : @[CPUerror.scala 104:32]
            IDEXA <= EXMEMALUOut @[CPUerror.scala 105:13]
            A <= EXMEMALUOut @[CPUerror.scala 106:9]
          else :
            when bypassAFromWB : @[CPUerror.scala 107:31]
              IDEXA <= MEMWBValue @[CPUerror.scala 108:13]
              A <= MEMWBValue @[CPUerror.scala 109:9]
            else :
              IDEXA <= Regs[IFIDrs1] @[CPUerror.scala 111:13]
              A <= Regs[IFIDrs1] @[CPUerror.scala 112:9]
        when bypassBFromEX : @[CPUerror.scala 114:25]
          node _IDEXB_T = add(IDEXB, IDEXA) @[CPUerror.scala 115:22]
          node _IDEXB_T_1 = tail(_IDEXB_T, 1) @[CPUerror.scala 115:22]
          IDEXB <= _IDEXB_T_1 @[CPUerror.scala 115:13]
          node _B_T = add(IDEXB, IDEXA) @[CPUerror.scala 116:18]
          node _B_T_1 = tail(_B_T, 1) @[CPUerror.scala 116:18]
          B <= _B_T_1 @[CPUerror.scala 116:9]
        else :
          when bypassBFromMEM : @[CPUerror.scala 117:32]
            IDEXB <= EXMEMALUOut @[CPUerror.scala 118:13]
            B <= EXMEMALUOut @[CPUerror.scala 119:9]
          else :
            when bypassBFromWB : @[CPUerror.scala 120:31]
              IDEXB <= MEMWBValue @[CPUerror.scala 121:13]
              B <= MEMWBValue @[CPUerror.scala 122:9]
            else :
              IDEXB <= Regs[IFIDrs2] @[CPUerror.scala 124:13]
              B <= Regs[IFIDrs2] @[CPUerror.scala 125:9]
        IDEXIR <= IFIDIR @[CPUerror.scala 127:12]
      else :
        IDEXIR <= UInt<32>("h13") @[CPUerror.scala 129:12]
        IDEXA <= UInt<1>("h0") @[CPUerror.scala 130:11]
        IDEXB <= UInt<1>("h0") @[CPUerror.scala 131:11]
      node _T_4 = eq(IDEXop, UInt<7>("h3")) @[CPUerror.scala 135:15]
      when _T_4 : @[CPUerror.scala 135:23]
        node _EXMEMALUOut_T = asSInt(IDEXA) @[CPUerror.scala 136:27]
        node _EXMEMALUOut_T_1 = bits(IDEXIR, 31, 20) @[CPUerror.scala 136:42]
        node _EXMEMALUOut_T_2 = asSInt(_EXMEMALUOut_T_1) @[CPUerror.scala 136:51]
        node _EXMEMALUOut_T_3 = add(_EXMEMALUOut_T, _EXMEMALUOut_T_2) @[CPUerror.scala 136:34]
        node _EXMEMALUOut_T_4 = tail(_EXMEMALUOut_T_3, 1) @[CPUerror.scala 136:34]
        node _EXMEMALUOut_T_5 = asSInt(_EXMEMALUOut_T_4) @[CPUerror.scala 136:34]
        node _EXMEMALUOut_T_6 = asUInt(_EXMEMALUOut_T_5) @[CPUerror.scala 136:59]
        EXMEMALUOut <= _EXMEMALUOut_T_6 @[CPUerror.scala 136:17]
      else :
        node _T_5 = eq(IDEXop, UInt<7>("h23")) @[CPUerror.scala 137:21]
        when _T_5 : @[CPUerror.scala 137:29]
          node _EXMEMALUOut_T_7 = asSInt(IDEXA) @[CPUerror.scala 138:27]
          node _EXMEMALUOut_T_8 = bits(IDEXIR, 31, 25) @[CPUerror.scala 138:46]
          node _EXMEMALUOut_T_9 = bits(IDEXIR, 11, 7) @[CPUerror.scala 138:62]
          node _EXMEMALUOut_T_10 = cat(_EXMEMALUOut_T_8, _EXMEMALUOut_T_9) @[Cat.scala 33:92]
          node _EXMEMALUOut_T_11 = asSInt(_EXMEMALUOut_T_10) @[CPUerror.scala 138:71]
          node _EXMEMALUOut_T_12 = add(_EXMEMALUOut_T_7, _EXMEMALUOut_T_11) @[CPUerror.scala 138:34]
          node _EXMEMALUOut_T_13 = tail(_EXMEMALUOut_T_12, 1) @[CPUerror.scala 138:34]
          node _EXMEMALUOut_T_14 = asSInt(_EXMEMALUOut_T_13) @[CPUerror.scala 138:34]
          node _EXMEMALUOut_T_15 = asUInt(_EXMEMALUOut_T_14) @[CPUerror.scala 138:79]
          EXMEMALUOut <= _EXMEMALUOut_T_15 @[CPUerror.scala 138:17]
        else :
          node _T_6 = eq(IDEXop, UInt<7>("h33")) @[CPUerror.scala 139:21]
          when _T_6 : @[CPUerror.scala 139:32]
            node _EXMEMALUOut_T_16 = add(IDEXA, IDEXB) @[CPUerror.scala 142:26]
            node _EXMEMALUOut_T_17 = tail(_EXMEMALUOut_T_16, 1) @[CPUerror.scala 142:26]
            EXMEMALUOut <= _EXMEMALUOut_T_17 @[CPUerror.scala 142:17]
      EXMEMIR <= IDEXIR @[CPUerror.scala 146:11]
      EXMEMB <= IDEXB @[CPUerror.scala 147:10]
      node _T_7 = eq(EXMEMop, UInt<7>("h33")) @[CPUerror.scala 150:16]
      when _T_7 : @[CPUerror.scala 150:27]
        MEMWBValue <= EXMEMALUOut @[CPUerror.scala 151:16]
      else :
        node _T_8 = eq(EXMEMop, UInt<7>("h3")) @[CPUerror.scala 152:22]
        when _T_8 : @[CPUerror.scala 152:30]
          node _MEMWBValue_T = bits(EXMEMALUOut, 9, 0)
          MEMWBValue <= DMemory[_MEMWBValue_T] @[CPUerror.scala 153:16]
        else :
          node _T_9 = eq(EXMEMop, UInt<7>("h23")) @[CPUerror.scala 154:22]
          when _T_9 : @[CPUerror.scala 154:30]
            node _T_10 = bits(EXMEMALUOut, 9, 0)
            DMemory[_T_10] <= EXMEMB @[CPUerror.scala 155:35]
      MEMWBIR <= EXMEMIR @[CPUerror.scala 158:11]
      node _T_11 = eq(MEMWBop, UInt<7>("h3")) @[CPUerror.scala 162:18]
      node _T_12 = eq(MEMWBop, UInt<7>("h33")) @[CPUerror.scala 162:38]
      node _T_13 = or(_T_11, _T_12) @[CPUerror.scala 162:26]
      node _T_14 = neq(MEMWBrd, UInt<1>("h0")) @[CPUerror.scala 162:62]
      node _T_15 = and(_T_13, _T_14) @[CPUerror.scala 162:50]
      when _T_15 : @[CPUerror.scala 162:72]
        Regs[MEMWBrd] <= MEMWBValue @[CPUerror.scala 163:19]
    io.rvfi.rd_wdata <= MEMWBValue @[CPUerror.scala 166:20]
    io.rvfi.regs <= Regs @[CPUerror.scala 168:16]
    io.rvfi.insn <= MEMWBIR @[CPUerror.scala 169:16]
    io.rvfi.valid <= UInt<1>("h0") @[CPUerror.scala 170:17]
    io.rvfi.pc_rdata <= CurPC @[CPUerror.scala 173:20]
    io.rvfi.pc_wdata <= PC @[CPUerror.scala 175:20]
    io.rvfi.rs1_addr <= IFIDrs1 @[CPUerror.scala 177:20]
    io.rvfi.rs2_addr <= IFIDrs2 @[CPUerror.scala 179:20]
    io.rvfi.rs1_rdata <= IDEXA @[CPUerror.scala 181:21]
    io.rvfi.rs2_rdata <= IDEXB @[CPUerror.scala 183:21]
    io.rvfi.rd_addr <= MEMWBrd @[CPUerror.scala 185:19]
    io.rvfi.mem_addr <= EXMEMALUOut @[CPUerror.scala 187:20]
    io.rvfi.mem_rdata <= MEMWBValue @[CPUerror.scala 189:21]
    io.rvfi.mem_wdata <= DMemory[1] @[CPUerror.scala 191:21]

