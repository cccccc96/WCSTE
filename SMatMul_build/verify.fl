load "ste.fl";
update_vossrc "RECURSION-CALL-LIMIT" "100000";
update_vossrc "DYNAMIC-ORDERING" "NO";
let p = verilog2pexlif "" "SMatMul" ["SMatMul.sv"] [];
let ckt = pexlif2fsm p;
let b00 = bv_variable "b00[7:0]" ;
let a00 = bv_variable "a00[7:0]" ;
let a10 = bv_variable "a10[7:0]" ;
let a01 = bv_variable "a01[7:0]" ;
let b10 = bv_variable "b10[7:0]" ;
let b01 = bv_variable "b01[7:0]" ;
let b11 = bv_variable "b11[7:0]" ;
let a11 = bv_variable "a11[7:0]" ;

let ant = 
  "clock" is_clock 6 
  and
  "reset" is T in_cycle 0  
 and 
 "reset" is F in_cycle 1  
 and 
 "io_in_a_0[7:0]" is a00 in_cycle 1  
 and 
 "io_in_b_0[7:0]" is b00 in_cycle 1  
 and 
 "io_in_a_1[7:0]" is (int2bv 0 ) in_cycle 1  
 and 
 "io_in_b_1[7:0]" is (int2bv 0 ) in_cycle 1  
 and 
 "reset" is F in_cycle 2  
 and 
 "io_in_a_0[7:0]" is a01 in_cycle 2  
 and 
 "io_in_b_0[7:0]" is b10 in_cycle 2  
 and 
 "io_in_a_1[7:0]" is a10 in_cycle 2  
 and 
 "io_in_b_1[7:0]" is b01 in_cycle 2  
 and 
 "reset" is F in_cycle 3  
 and 
 "io_in_a_0[7:0]" is (int2bv 0 ) in_cycle 3  
 and 
 "io_in_b_0[7:0]" is (int2bv 0 ) in_cycle 3  
 and 
 "io_in_a_1[7:0]" is a11 in_cycle 3  
 and 
 "io_in_b_1[7:0]" is b11 in_cycle 3  
 and 
 "reset" is F in_cycle 4  
 and 
 "io_in_a_0[7:0]" is (int2bv 0 ) in_cycle 4  
 and 
 "io_in_b_0[7:0]" is (int2bv 0 ) in_cycle 4  
 and 
 "io_in_a_1[7:0]" is (int2bv 0 ) in_cycle 4  
 and 
 "io_in_b_1[7:0]" is (int2bv 0 ) in_cycle 4  
 and 
 "reset" is F in_cycle 5  
 and 
 "io_in_a_0[7:0]" is (int2bv 0 ) in_cycle 5  
 and 
 "io_in_b_0[7:0]" is (int2bv 0 ) in_cycle 5  
 and 
 "io_in_a_1[7:0]" is (int2bv 0 ) in_cycle 5  
 and 
 "io_in_b_1[7:0]" is (int2bv 0 ) in_cycle 5 ;
let cons = 
  "io_out_0[15:0]" is (list2bv (tl (bv2list (bv_add ( bv_mul a00  b00 ) ( bv_mul a01  b10 ))))) in_cycle 5  
 and 
 "io_out_1[15:0]" is (list2bv (tl (bv2list (bv_add ( bv_mul a00  b01 ) ( bv_mul a01  b11 ))))) in_cycle 5  
 and 
 "io_out_2[15:0]" is (list2bv (tl (bv2list (bv_add ( bv_mul a10  b00 ) ( bv_mul a11  b10 ))))) in_cycle 5  
 and 
 "io_out_3[15:0]" is (list2bv (tl (bv2list (bv_add ( bv_mul a10  b01 ) ( bv_mul a11  b11 ))))) in_cycle 5 ;
let ste = STE "-e" ckt [] ant cons [];
ste;
printf "ste_r:";
get_ste_result ste "checkOK";
exit 0;
    